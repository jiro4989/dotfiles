snippet fori "for i := 0; i < max..."
for ${1:counter} := 0; $1 < ${2:max}; $1++ {
	${3:implementation}
}
endsnippet

snippet foriv "for i, v := range ..."
for ${1:counter}, ${2:value} := range ${3:iterator} {
	${4:implementation}
}
endsnippet

snippet forv "for _, v := range..."
for _, ${1:value} := range ${2:iterator} {
	${3:implementation}
}
endsnippet

snippet genf "関数を生成する"
// ${1:funcName} ${2:desc}
func $1(${3:arguments}) {
	${4:implementation}
}
endsnippet

snippet scscan "NewScanner"
sc := bufio.NewScanner(f)
for sc.Scan() {
	line := sc.Text()
	// TODO
}
if err := sc.Err(); err != nil {
	return err
}
endsnippet

global !p
def _parse_field(field):
	"文字列を解析し、構造体のフィールドと型のタプルリストを返す"
	ret = []
	for line in field.split("\n"):
		ft = line.strip().split(" ")
		if len(ft) < 2:
			continue
		f = ft[0].strip()
		t = ft[1].strip()
		ret.append((f, t))
	return ret

def parse_field(field):
	"文字列を解析し、構造体のフィールドへの値設定箇所の文字列を返す"
	field_types = _parse_field(field)
	if len(field_types) < 1:
		return ""
	struct_var = ["%s: %s," % (f, y) for f, y in field_types]
	return "\n\t\t\t".join(struct_var)

def make_assert_equal(args):
	"文字列を解析し、テストコードのassert.Equal部分を生成して返す"
	func_name         = args[1]
	input_field_type  = args[2]
	expect_field_type = args[3]

	# 変数宣言部分の文字列の生成
	# ex:
	#   in1, in2, expect, err := v.in1, v.in2, v.expect, v.err

	# 変数名、型名のタプルリストの取得
	input_field_types  = _parse_field(input_field_type)
	expect_field_types = _parse_field(expect_field_type)

	# 入力値、期待値の変数名だけ取得
	input_fields  = [f[0] for f in input_field_types]
	expect_fields = [f[0] for f in expect_field_types]
	fields = input_fields + expect_fields

	# 変数定義部とフィールドへのアクセス部の生成
	input_vars_text    = ", ".join(fields)
	access_fields_text = ", ".join(["v." + f for f in fields])

	result = []
	result.append("%s := %s" % (input_vars_text, access_fields_text))

	# テスト対象の関数の実行と、戻り値文字列の生成
	# ex:
	#   got1, got2, got3 := TargetFunc(in1, in2)
	got_vars = ["got%d" % (i+1) for i, f in enumerate(expect_fields)]
	result.append("%s := %s(%s)" % (", ".join(got_vars), func_name, ", ".join(input_fields)))

	# テスト実行部の生成
	# ex:
	#   assert.Equal(t, expect1, got1)
	#   assert.Equal(t, expect2, got2)
	for expect, got in zip(expect_fields, got_vars):
		result.append("assert.Equal(t, %s, %s)" % (expect, got))
	
	return "\n\t\t".join(result)
endglobal

snippet gent "テストコードを生成する"
func Test${1:functionName}(t *testing.T) {
	type TD struct {
		${2:Input Field Type}
		${3:Expect Field Type}
	}
	tds := []TD{
		TD{
			`!p snip.rv = parse_field(t[2])`
			`!p snip.rv = parse_field(t[3])`
		},
	}
	for _, v := range tds {
		`!p snip.rv = make_assert_equal(t)`
	}
}
endsnippet
